import numpy as np
import cv2
import math
import time

fft_sin_table = np.array([  0.000000,    0.006136,    0.012272,    0.018407,    0.024541,    0.030675,    0.036807,    0.042938,    0.049068,    0.055195,    0.061321,    0.067444,    0.073565,    0.079682,    0.085797,    0.091909,    
                            0.098017,    0.104122,    0.110222,    0.116319,    0.122411,    0.128498,    0.134581,    0.140658,    0.146730,    0.152797,    0.158858,    0.164913,    0.170962,    0.177004,    0.183040,    0.189069,    
                            0.195090,    0.201105,    0.207111,    0.213110,    0.219101,    0.225084,    0.231058,    0.237024,    0.242980,    0.248928,    0.254866,    0.260794,    0.266713,    0.272621,    0.278520,    0.284408,    
                            0.290285,    0.296151,    0.302006,    0.307850,    0.313682,    0.319502,    0.325310,    0.331106,    0.336890,    0.342661,    0.348419,    0.354164,    0.359895,    0.365613,    0.371317,    0.377007,    
                            0.382683,    0.388345,    0.393992,    0.399624,    0.405241,    0.410843,    0.416430,    0.422000,    0.427555,    0.433094,    0.438616,    0.444122,    0.449611,    0.455084,    0.460539,    0.465976,    
                            0.471397,    0.476799,    0.482184,    0.487550,    0.492898,    0.498228,    0.503538,    0.508830,    0.514103,    0.519356,    0.524590,    0.529804,    0.534998,    0.540171,    0.545325,    0.550458,    
                            0.555570,    0.560662,    0.565732,    0.570781,    0.575808,    0.580814,    0.585798,    0.590760,    0.595699,    0.600616,    0.605511,    0.610383,    0.615232,    0.620057,    0.624859,    0.629638,    
                            0.634393,    0.639124,    0.643832,    0.648514,    0.653173,    0.657807,    0.662416,    0.667000,    0.671559,    0.676093,    0.680601,    0.685084,    0.689541,    0.693971,    0.698376,    0.702755,    
                            0.707107,    0.711432,    0.715731,    0.720003,    0.724247,    0.728464,    0.732654,    0.736817,    0.740951,    0.745058,    0.749136,    0.753187,    0.757209,    0.761202,    0.765167,    0.769103,    
                            0.773010,    0.776888,    0.780737,    0.784557,    0.788346,    0.792107,    0.795837,    0.799537,    0.803208,    0.806848,    0.810457,    0.814036,    0.817585,    0.821103,    0.824589,    0.828045,    
                            0.831470,    0.834863,    0.838225,    0.841555,    0.844854,    0.848120,    0.851355,    0.854558,    0.857729,    0.860867,    0.863973,    0.867046,    0.870087,    0.873095,    0.876070,    0.879012,    
                            0.881921,    0.884797,    0.887640,    0.890449,    0.893224,    0.895966,    0.898674,    0.901349,    0.903989,    0.906596,    0.909168,    0.911706,    0.914210,    0.916679,    0.919114,    0.921514,    
                            0.923880,    0.926210,    0.928506,    0.930767,    0.932993,    0.935184,    0.937339,    0.939459,    0.941544,    0.943593,    0.945607,    0.947586,    0.949528,    0.951435,    0.953306,    0.955141,    
                            0.956940,    0.958703,    0.960431,    0.962121,    0.963776,    0.965394,    0.966976,    0.968522,    0.970031,    0.971504,    0.972940,    0.974339,    0.975702,    0.977028,    0.978317,    0.979570,    
                            0.980785,    0.981964,    0.983105,    0.984210,    0.985278,    0.986308,    0.987301,    0.988258,    0.989177,    0.990058,    0.990903,    0.991710,    0.992480,    0.993212,    0.993907,    0.994565,    
                            0.995185,    0.995767,    0.996313,    0.996820,    0.997290,    0.997723,    0.998118,    0.998476,    0.998795,    0.999078,    0.999322,    0.999529,    0.999699,    0.999831,    0.999925,    0.999981,    
                            1.000000,    0.999981,    0.999925,    0.999831,    0.999699,    0.999529,    0.999322,    0.999078,    0.998795,    0.998476,    0.998118,    0.997723,    0.997290,    0.996820,    0.996313,    0.995767,    
                            0.995185,    0.994565,    0.993907,    0.993212,    0.992480,    0.991710,    0.990903,    0.990058,    0.989177,    0.988258,    0.987301,    0.986308,    0.985278,    0.984210,    0.983105,    0.981964,    
                            0.980785,    0.979570,    0.978317,    0.977028,    0.975702,    0.974339,    0.972940,    0.971504,    0.970031,    0.968522,    0.966976,    0.965394,    0.963776,    0.962121,    0.960431,    0.958703,    
                            0.956940,    0.955141,    0.953306,    0.951435,    0.949528,    0.947586,    0.945607,    0.943593,    0.941544,    0.939459,    0.937339,    0.935184,    0.932993,    0.930767,    0.928506,    0.926210,    
                            0.923880,    0.921514,    0.919114,    0.916679,    0.914210,    0.911706,    0.909168,    0.906596,    0.903989,    0.901349,    0.898674,    0.895966,    0.893224,    0.890449,    0.887640,    0.884797,    
                            0.881921,    0.879012,    0.876070,    0.873095,    0.870087,    0.867046,    0.863973,    0.860867,    0.857729,    0.854558,    0.851355,    0.848120,    0.844854,    0.841555,    0.838225,    0.834863,    
                            0.831470,    0.828045,    0.824589,    0.821103,    0.817585,    0.814036,    0.810457,    0.806848,    0.803208,    0.799537,    0.795837,    0.792107,    0.788346,    0.784557,    0.780737,    0.776888,    
                            0.773010,    0.769103,    0.765167,    0.761202,    0.757209,    0.753187,    0.749136,    0.745058,    0.740951,    0.736817,    0.732654,    0.728464,    0.724247,    0.720003,    0.715731,    0.711432,    
                            0.707107,    0.702755,    0.698376,    0.693971,    0.689541,    0.685084,    0.680601,    0.676093,    0.671559,    0.667000,    0.662416,    0.657807,    0.653173,    0.648514,    0.643832,    0.639124,    
                            0.634393,    0.629638,    0.624859,    0.620057,    0.615232,    0.610383,    0.605511,    0.600616,    0.595699,    0.590760,    0.585798,    0.580814,    0.575808,    0.570781,    0.565732,    0.560662,    
                            0.555570,    0.550458,    0.545325,    0.540171,    0.534998,    0.529804,    0.524590,    0.519356,    0.514103,    0.508830,    0.503538,    0.498228,    0.492898,    0.487550,    0.482184,    0.476799,    
                            0.471397,    0.465976,    0.460539,    0.455084,    0.449611,    0.444122,    0.438616,    0.433094,    0.427555,    0.422000,    0.416430,    0.410843,    0.405241,    0.399624,    0.393992,    0.388345,    
                            0.382683,    0.377007,    0.371317,    0.365613,    0.359895,    0.354164,    0.348419,    0.342661,    0.336890,    0.331106,    0.325310,    0.319502,    0.313682,    0.307850,    0.302006,    0.296151,    
                            0.290285,    0.284408,    0.278520,    0.272621,    0.266713,    0.260794,    0.254866,    0.248928,    0.242980,    0.237024,    0.231058,    0.225084,    0.219101,    0.213110,    0.207111,    0.201105,    
                            0.195090,    0.189069,    0.183040,    0.177004,    0.170962,    0.164913,    0.158858,    0.152797,    0.146730,    0.140658,    0.134581,    0.128498,    0.122411,    0.116319,    0.110222,    0.104122,    
                            0.098017,    0.091909,    0.085797,    0.079682,    0.073565,    0.067444,    0.061321,    0.055195,    0.049068,    0.042938,    0.036807,    0.030675,    0.024541,    0.018407,    0.012272,    0.006136])
    
fft_cos_table = np.array([  1.000000,    0.999981,    0.999925,    0.999831,    0.999699,    0.999529,    0.999322,    0.999078,    0.998795,    0.998476,    0.998118,    0.997723,    0.997290,    0.996820,    0.996313,    0.995767,    
                            0.995185,    0.994565,    0.993907,    0.993212,    0.992480,    0.991710,    0.990903,    0.990058,    0.989177,    0.988258,    0.987301,    0.986308,    0.985278,    0.984210,    0.983105,    0.981964,    
                            0.980785,    0.979570,    0.978317,    0.977028,    0.975702,    0.974339,    0.972940,    0.971504,    0.970031,    0.968522,    0.966976,    0.965394,    0.963776,    0.962121,    0.960431,    0.958703,    
                            0.956940,    0.955141,    0.953306,    0.951435,    0.949528,    0.947586,    0.945607,    0.943593,    0.941544,    0.939459,    0.937339,    0.935184,    0.932993,    0.930767,    0.928506,    0.926210,   
                            0.923880,    0.921514,    0.919114,    0.916679,    0.914210,    0.911706,    0.909168,    0.906596,    0.903989,    0.901349,    0.898674,    0.895966,    0.893224,    0.890449,    0.887640,    0.884797,   
                            0.881921,    0.879012,    0.876070,    0.873095,    0.870087,    0.867046,    0.863973,    0.860867,    0.857729,    0.854558,    0.851355,    0.848120,    0.844854,    0.841555,    0.838225,    0.834863,   
                            0.831470,    0.828045,    0.824589,    0.821103,    0.817585,    0.814036,    0.810457,    0.806848,    0.803208,    0.799537,    0.795837,    0.792107,    0.788346,    0.784557,    0.780737,    0.776888,   
                            0.773010,    0.769103,    0.765167,    0.761202,    0.757209,    0.753187,    0.749136,    0.745058,    0.740951,    0.736817,    0.732654,    0.728464,    0.724247,    0.720003,    0.715731,    0.711432,   
                            0.707107,    0.702755,    0.698376,    0.693971,    0.689541,    0.685084,    0.680601,    0.676093,    0.671559,    0.667000,    0.662416,    0.657807,    0.653173,    0.648514,    0.643832,    0.639124,   
                            0.634393,    0.629638,    0.624859,    0.620057,    0.615232,    0.610383,    0.605511,    0.600616,    0.595699,    0.590760,    0.585798,    0.580814,    0.575808,    0.570781,    0.565732,    0.560662,   
                            0.555570,    0.550458,    0.545325,    0.540171,    0.534998,    0.529804,    0.524590,    0.519356,    0.514103,    0.508830,    0.503538,    0.498228,    0.492898,    0.487550,    0.482184,    0.476799,   
                            0.471397,    0.465976,    0.460539,    0.455084,    0.449611,    0.444122,    0.438616,    0.433094,    0.427555,    0.422000,    0.416430,    0.410843,    0.405241,    0.399624,    0.393992,    0.388345,   
                            0.382683,    0.377007,    0.371317,    0.365613,    0.359895,    0.354164,    0.348419,    0.342661,    0.336890,    0.331106,    0.325310,    0.319502,    0.313682,    0.307850,    0.302006,    0.296151,   
                            0.290285,    0.284408,    0.278520,    0.272621,    0.266713,    0.260794,    0.254866,    0.248928,    0.242980,    0.237024,    0.231058,    0.225084,    0.219101,    0.213110,    0.207111,    0.201105,   
                            0.195090,    0.189069,    0.183040,    0.177004,    0.170962,    0.164913,    0.158858,    0.152797,    0.146730,    0.140658,    0.134581,    0.128498,    0.122411,    0.116319,    0.110222,    0.104122,   
                            0.098017,    0.091909,    0.085797,    0.079682,    0.073565,    0.067444,    0.061321,    0.055195,    0.049068,    0.042938,    0.036807,    0.030675,    0.024541,    0.018407,    0.012272,    0.006136,   
                            0.000000,   -0.006136,   -0.012272,   -0.018407,   -0.024541,   -0.030675,   -0.036807,   -0.042938,   -0.049068,   -0.055195,   -0.061321,   -0.067444,   -0.073565,   -0.079682,   -0.085797,   -0.091909,   
                           -0.098017,   -0.104122,   -0.110222,   -0.116319,   -0.122411,   -0.128498,   -0.134581,   -0.140658,   -0.146730,   -0.152797,   -0.158858,   -0.164913,   -0.170962,   -0.177004,   -0.183040,   -0.189069,   
                           -0.195090,   -0.201105,   -0.207111,   -0.213110,   -0.219101,   -0.225084,   -0.231058,   -0.237024,   -0.242980,   -0.248928,   -0.254866,   -0.260794,   -0.266713,   -0.272621,   -0.278520,   -0.284408,   
                           -0.290285,   -0.296151,   -0.302006,   -0.307850,   -0.313682,   -0.319502,   -0.325310,   -0.331106,   -0.336890,   -0.342661,   -0.348419,   -0.354164,   -0.359895,   -0.365613,   -0.371317,   -0.377007,   
                           -0.382683,   -0.388345,   -0.393992,   -0.399624,   -0.405241,   -0.410843,   -0.416430,   -0.422000,   -0.427555,   -0.433094,   -0.438616,   -0.444122,   -0.449611,   -0.455084,   -0.460539,   -0.465976,   
                           -0.471397,   -0.476799,   -0.482184,   -0.487550,   -0.492898,   -0.498228,   -0.503538,   -0.508830,   -0.514103,   -0.519356,   -0.524590,   -0.529804,   -0.534998,   -0.540171,   -0.545325,   -0.550458,   
                           -0.555570,   -0.560662,   -0.565732,   -0.570781,   -0.575808,   -0.580814,   -0.585798,   -0.590760,   -0.595699,   -0.600616,   -0.605511,   -0.610383,   -0.615232,   -0.620057,   -0.624859,   -0.629638,   
                           -0.634393,   -0.639124,   -0.643832,   -0.648514,   -0.653173,   -0.657807,   -0.662416,   -0.667000,   -0.671559,   -0.676093,   -0.680601,   -0.685084,   -0.689541,   -0.693971,   -0.698376,   -0.702755,   
                           -0.707107,   -0.711432,   -0.715731,   -0.720003,   -0.724247,   -0.728464,   -0.732654,   -0.736817,   -0.740951,   -0.745058,   -0.749136,   -0.753187,   -0.757209,   -0.761202,   -0.765167,   -0.769103,   
                           -0.773010,   -0.776888,   -0.780737,   -0.784557,   -0.788346,   -0.792107,   -0.795837,   -0.799537,   -0.803208,   -0.806848,   -0.810457,   -0.814036,   -0.817585,   -0.821103,   -0.824589,   -0.828045,   
                           -0.831470,   -0.834863,   -0.838225,   -0.841555,   -0.844854,   -0.848120,   -0.851355,   -0.854558,   -0.857729,   -0.860867,   -0.863973,   -0.867046,   -0.870087,   -0.873095,   -0.876070,   -0.879012,   
                           -0.881921,   -0.884797,   -0.887640,   -0.890449,   -0.893224,   -0.895966,   -0.898674,   -0.901349,   -0.903989,   -0.906596,   -0.909168,   -0.911706,   -0.914210,   -0.916679,   -0.919114,   -0.921514,   
                           -0.923880,   -0.926210,   -0.928506,   -0.930767,   -0.932993,   -0.935184,   -0.937339,   -0.939459,   -0.941544,   -0.943593,   -0.945607,   -0.947586,   -0.949528,   -0.951435,   -0.953306,   -0.955141,   
                           -0.956940,   -0.958703,   -0.960431,   -0.962121,   -0.963776,   -0.965394,   -0.966976,   -0.968522,   -0.970031,   -0.971504,   -0.972940,   -0.974339,   -0.975702,   -0.977028,   -0.978317,   -0.979570,   
                           -0.980785,   -0.981964,   -0.983105,   -0.984210,   -0.985278,   -0.986308,   -0.987301,   -0.988258,   -0.989177,   -0.990058,   -0.990903,   -0.991710,   -0.992480,   -0.993212,   -0.993907,   -0.994565,   
                           -0.995185,   -0.995767,   -0.996313,   -0.996820,   -0.997290,   -0.997723,   -0.998118,   -0.998476,   -0.998795,   -0.999078,   -0.999322,   -0.999529,   -0.999699,   -0.999831,   -0.999925,   -0.999981])

def get_sin(k, N_pow2):
    return fft_sin_table[k << (9 - N_pow2)]

def get_cos(k, N_pow2):
    return fft_cos_table[k << (9 - N_pow2)]

def get_ar(k, N_pow2):
    return 0.5 * (1 - get_sin(k, N_pow2))

def get_ai(k, N_pow2):
    return 0.5 * (-get_cos(k, N_pow2))

def get_br(k, N_pow2):
    return  0.5 * (1 + get_sin(k, N_pow2))

def get_bi(k, N_pow2):
    return 0.5 * (get_cos(k, N_pow2))

def get_a_star_r(k, N_pow2):
    return 0.5 * ( 1 - get_sin( k, N_pow2 ))

def get_a_star_i(k, N_pow2):
    return 0.5 * ( + get_cos( k, N_pow2 ))

def get_b_star_r(k, N_pow2):
    return 0.5 * ( 1 + get_sin( k, N_pow2))

def get_b_star_i(k, N_pow2):
    return 0.5 * ( -get_cos( k, N_pow2))

# get the k in 2^k input value type
def int_clog2(k):
    i = 0
    while (k > 1):
        k = k // 2
        i += 1
    return i

# return value of reverse bit with left shift
def bit_reverse(index, N_pow2):
    result = 0
    for i in range(32):
        result <<= 1
        result |= index & 1
        index >>= 1
    result = result >> (30 - N_pow2)
    return result

# return value of a = b, b = a
def swap(a,b):
    tmp = a
    a = b
    b = tmp
    return a,b

def sizeof(string):
    if (string == 'uint32_t'): return 4
    elif (string == 'uint16_t'): return 2
    elif (string == 'uint8_t'): return 1
    elif (string == 'float'): return 4
    elif (string == 'double'): return 8
    elif (string == 'double_t'): return 8
    else: return 0


def fft2d_alloc(img):
    class imageData(object):
        image = img
        w = img.shape[1]
        h = image.shape[0]
        w_pow2 = int_clog2(img.shape[1])
        h_pow2 = int_clog2(img.shape[0])
        data   = np.zeros(2 * (1 << w_pow2) * (1 << h_pow2) * sizeof('float'))
    return imageData

def prepare_real_input( inp, inp_len, outp, N_pow2):
    for k in range(0, 2 << N_pow2, 2):
        m = bit_reverse(k, N_pow2)
        outp[m + 0] = inp[k + 0] if  (k + 0 < inp_len) else 0
        outp[m + 1] = inp[k + 1] if  (k + 1 < inp_len) else 0
    
def prepare_complex_input( inp, outp, N_pow2, stride):
    for k in range(0, 2 << N_pow2, 2):
        m = bit_reverse(k, N_pow2)
        if (k < m):
            outp[m * stride + 0], inp[k * stride + 0] = swap(outp[m * stride + 0], inp[k * stride + 0])
            outp[m * stride + 1], inp[k * stride + 1] = swap(outp[m * stride + 1], inp[k * stride + 1])


def do_fft( inout, N_pow2, stride):
    N = 2 << N_pow2
    for N_pow2_i in range(1, N_pow2 + 1):
        N_mul2 = 2 << N_pow2_i
        N_div2 = 1 << N_pow2_i
        for i in range(0, N, N_mul2):
            k = 0
            for j in range(i, i + N_div2, 2):
                x0_r = j * stride + 0 
                x0_i = j * stride + 1 
                x1_r = (j + N_div2) * stride + 0
                x1_i = (j + N_div2) * stride + 1 

                tmp_r = inout[x1_r] * get_cos(k, N_pow2) + inout[x1_i] * get_sin(k, N_pow2)
                tmp_i = inout[x1_i] * get_cos(k, N_pow2) - inout[x1_r] * get_sin(k, N_pow2)
                inout[x1_r] = inout[x0_r] - tmp_r
                inout[x1_i] = inout[x0_i] - tmp_i
                inout[x0_r] += tmp_r
                inout[x0_i] += tmp_i
                k += (N >> N_pow2_i)
            
def unpack_fft(inp, outp, N_pow2):
    l = 2 << N_pow2
    m = l << 1
    for k in range(0, l, 2):
        k_r = k + 0
        k_i = k + 1
        N_k_r = ( 0 if (not k) else (l - k) ) + 0
        N_k_i = ( 0 if (not k) else (l - k) ) + 1
        N2_k_r = ( 0 if (not k) else (m - k) ) + 0
        N2_k_i = ( 0 if (not k) else (m - k) ) + 1
        k_2 = k >> 1

        outp[k_r] = ( inp[k_r] * get_ar(k_2, N_pow2) ) - ( inp[k_i] * get_ai(k_2, N_pow2) ) + ( inp[N_k_r] * get_br(k_2, N_pow2) ) + ( inp[N_k_i] * get_bi(k_2, N_pow2) )
        outp[k_i] = ( inp[k_i] * get_ar(k_2, N_pow2) ) + ( inp[k_r] * get_ai(k_2, N_pow2) ) + ( inp[N_k_r] * get_bi(k_2, N_pow2) ) - ( inp[N_k_i] * get_br(k_2, N_pow2) )

        if (k > 0):
            outp[N2_k_r] = outp[k_r]
            outp[N2_k_i] = -outp[k_i]
    outp[(2 << N_pow2)+0] = inp[0+0] - inp[0+1]
    outp[(2 << N_pow2)+1] = 0

def fft2d_run(imageData):
    #   THIS SECTION COPIES IMAGE DATA INTO THE FFT BUFFER AND DOES FFT ROWS BY ROWS
    for i in range(imageData.h):
        controller_data = np.zeros( (2 << imageData.w_pow2) * sizeof('float') )
        #   Input gray image to array
        tmp = imageData.image[i, :].astype(np.uint8)
        h_buffer = np.zeros( (1 << imageData.w_pow2) * sizeof('float'))
        prepare_real_input(tmp, len(tmp), h_buffer, imageData.w_pow2 - 1)
        del(tmp)
        do_fft(h_buffer, imageData.w_pow2 - 1, 1)
        
        unpack_fft(h_buffer, controller_data, imageData.w_pow2 - 1)
        del(h_buffer)

        imageData.data[ i * (2 << imageData.w_pow2) : i * (2 << imageData.w_pow2) + len(controller_data)] = controller_data
        del(controller_data)
    #   THIS SECTION DOES FFT COLUMNS BY COLUMNS

    for i in range(0, 2 << imageData.w_pow2, 2):
        p = imageData.data[i:]
        prepare_complex_input(p, p, imageData.h_pow2, (1 << imageData.w_pow2))
        do_fft(p, imageData.h_pow2, (1 << imageData.w_pow2))
        del(p)

def do_ifft(inout, N_pow2, stride):
    N = 2 << N_pow2
    for N_pow2_i in range(1, N_pow2 + 1):
        N_mul2 = 2 << N_pow2_i
        N_div2 = 1 << N_pow2_i
        for i in range(0, N, N_mul2):
            k = 0
            for j in range(i, i + N_div2, 2):
                x0_r = j * stride + 0
                x0_i = j * stride + 1
                x1_r = (j + N_div2) * stride + 0
                x1_i = (j + N_div2) * stride + 1

                tmp_r = inout[x1_r] * get_cos(k, N_pow2) - inout[x1_i] * get_sin(k, N_pow2)
                tmp_i = inout[x1_i] * get_cos(k, N_pow2) + inout[x1_r] * get_sin(k, N_pow2)
                inout[x1_r] = inout[x0_r] - tmp_r
                inout[x1_i] = inout[x0_i] - tmp_i
                inout[x0_r] += tmp_r
                inout[x0_i] += tmp_i
    
    div = 1.0 / (N >> 1)
    for i in range(0, N, 2):
        inout[ i * stride + 0 ] *= div
        inout[ i * stride + 1 ] *= div

def pack_fft(inp, outp, N_pow2):
    l = 2 << N_pow2
    for k in range(0, l, 2):
        k_r = k + 0
        k_i = k + 1
        N_k_r = (l - k) + 0
        N_k_i = (l - k) + 1
        k_2 = k >> 1

        outp[k_r] = inp[k_r] * get_a_star_r(k_2, N_pow2) - inp[k_i] * get_a_star_i(k_2, N_pow2) + inp[N_k_r] * get_b_star_r(k_2, N_pow2) + inp[N_k_i] * get_b_star_i(k_2, N_pow2)
        outp[k_i] = inp[k_i] * get_a_star_r(k_2, N_pow2) + inp[k_r] * get_a_star_i(k_2, N_pow2) + inp[N_k_r] * get_b_star_i(k_2, N_pow2) - inp[N_k_i] * get_b_star_r(k_2, N_pow2)


def ifft2d_run(imageData):
    for i in range(0, 2 << imageData.w_pow2, 2):
        p = imageData.data[i:]
        prepare_complex_input(p, p, imageData.h_pow2, (1 << imageData.w_pow2))
        do_ifft(p, imageData.h_pow2, (1 << imageData.w_pow2))
    ########################################################################


    ifft_data = np.zeros(imageData.data.shape)

    for i in range(1 << imageData.h_pow2):
        # fft1d_controller_i.data = controller->data + (i * (2 << controller->w_pow2))
        data = imageData.data[ i * ( 2 << imageData.w_pow2 ): ].copy()
            
        # print(data.shape, np.count_nonzero(data), i, end= '\n-----------------\n')

        # ifft1d_run(&fft1d_controller_i)
        h_buffer = np.zeros( (1 << imageData.w_pow2) * sizeof('float') ) # 128 * 4 = 512
        pack_fft(data, h_buffer, imageData.w_pow2 - 1)
        prepare_complex_input(h_buffer, h_buffer, imageData.w_pow2 - 1, 1)
        do_ifft(h_buffer, imageData.w_pow2 - 1, 1)

        # print(h_buffer.shape, np.count_nonzero(h_buffer), i, end= '\n-----------------\n')

        ifft_data[ i * (2 << imageData.w_pow2) : i * (2 << imageData.w_pow2) + len(h_buffer)] = h_buffer
        # print(np.count_nonzero(ifft_data))

        # copy data to the controller->data

    imageData.data = ifft_data
        

def find_displacement(img0, img1):
    img0 = cv2.cvtColor(img0, cv2.COLOR_BGR2GRAY)
    img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)

    # fft2d_alloc()
    imageData0 = fft2d_alloc(img0)
    imageData1 = fft2d_alloc(img1)
    
    # fft2d_run()
    fft2d_run(imageData0)
    fft2d_run(imageData1)
    # print(imageData0.data)

    w = int(imageData0.w)
    h = int(imageData0.h)

    # hadamard product
    for i in range(0, h * w * 2, 2):
        ga_r = imageData0.data[i + 0]
        ga_i = imageData0.data[i + 1]
        gb_r = imageData1.data[i + 0]
        gb_i = -imageData1.data[i + 1]
        hp_r = ( ga_r * gb_r ) - ( ga_i * gb_i )
        hp_i = ( ga_r * gb_i ) + ( ga_i * gb_r )
        if (math.sqrt( hp_r ** 2 + hp_i ** 2 ) == 0):
            mag = float('nan')
        else: mag  = 1 / math.sqrt( hp_r ** 2 + hp_i ** 2 )
        imageData0.data[i + 0] = hp_r * mag
        imageData0.data[i + 1] = hp_i * mag

    # ifft2d_run()
    ifft2d_run(imageData0)

    sum_t = 0
    max_t = 0
    off_x = 0
    off_y = 0

    # find max and position of offset
    for i in range(h):
        for j in range(w):
            f_r = imageData0.data[ (i * w * 2) + j ]
            sum_t += f_r
            if (f_r > max_t):
                max_t = f_r
                off_x = j
                off_y = i
    
    response = max_t / sum_t

    f_sum = 0 
    f_off_x = 0
    f_off_y = 0

    for i in range(-2, 2):
        for j in range(-2, 2):
            new_x = off_x + j
            if (new_x < 0)  : new_x += w
            if (new_x >= w) : new_x -= w 
            new_y = off_y + i
            if (new_y < 0)  : new_y += h
            if (new_y >= h) : new_y -= h
            f_r = imageData0.data[( new_y * w * 2 ) + new_x]
            f_off_x += (off_x + j) * f_r
            f_off_y += (off_y + i) * f_r
            f_sum += f_r

    f_off_x /= f_sum
    f_off_y /= f_sum

    if ( f_off_x >= (w/2.0) ):  x_translation = f_off_x - w
    else:                       x_translation = f_off_x

    if ( f_off_y >= (h/2.0) ):  y_translation = -(f_off_y - h)
    else:                       y_translation = -(f_off_y)

    if ((x_translation < -w / 2.0 ) or (w / 2.0 <= x_translation) or (y_translation < -h / 2.0) or (h / 2.0 <= y_translation)) or np.isinf(x_translation) or np.isinf(y_translation) or np.isnan(x_translation) or np.isnan(y_translation):
        x_translation = 0
        y_translation = 0
        response = 0

    # return data
    # return 1, 0
    return int(x_translation*35), int(y_translation*53)

# img0 = cv2.imread('./images/sample_1.jpg')
# img1 = cv2.imread('./images/sample_2_-1_-3.jpg')

cap =cv2.VideoCapture(0)



if cap.isOpened():
    ret, img0 = cap.read()
    img0 = cv2.resize(img0, (64,32))

while cap.isOpened():
    start = time.time()

    ret, img1 = cap.read()
    img1 = cv2.resize(img1, (64,32))
    # cv2.imshow('image', img1)
    x,y = find_displacement(img0, img1)

    end = time.time()
    fps = (1/ (end - start))

    print("displacement_x = {},\t displacement_y = {},\t FPS count = {:.2f}".format(x,y, fps))
    img0 = img1

    k = cv2.waitKey(1) & 0xFF
    if k == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()